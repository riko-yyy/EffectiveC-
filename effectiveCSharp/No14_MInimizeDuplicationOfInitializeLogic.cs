using System;
using effectiveCSharp.Util;

namespace effectiveCSharp
{
    /// <summary>
    /// 初期化ロジックの重複を最小化する
    /// </summary>
    public class No14_MinimizeDuplicationOfInitializeLogic
    {
        public No14_MinimizeDuplicationOfInitializeLogic()
        {
            //目的：
            //①複数コンストラクタの共通処理をコンストラクタ初期化子として切り出し、重複を避けコンパイル時のコードの効率化を図る

            //概要：
            //--------------------------------------------------------------------------------------
            //コンストラクタの共通処理はコンストラクタ初期化子で行う

            //※privateな共通メソッドは避ける
            //優位性：コンパイル時、共通メソッドやオブジェクト初期化子の重複の検出ができず、
            //　　　　１メンバ変数にオブジェクト初期化子による初期化のあと、共通メソッドによる初期化と2回初期化が実行されてしまう
            //　　　　コンストラクタ初期化子の場合、オブジェクト初期化子が呼び出されているコンストラクタ内の最初に実行されるのみになる
            //　　　　またreadonlyなメンバ変数の初期化は共通メソッドではできない


            //例：
            //--------------------------------------------------------------------------------------
            //1)オーバーロード
            var a1 = new MyClass();
            var a2 = new MyClass(1);
            var a3 = new MyClass(1,"aaaa");

            //いずれも３つ目のコンストラクタを呼び出している

            //--------------------------------------------------------------------------------------
            //2)デフォルト引数
            var b1 = new MyClass2();
            var b2 = new MyClass2(1);
            var b3 = new MyClass2(1, "aaaa");

            //いずれも３つ目のコンストラクタを呼び出している

            //--------------------------------------------------------------------------------------
            //おまけ：インスタンス生成の流れ
            //1)static変数のメモリストレージを0へ
            //2)static変数のオブジェクト初期化子
            //3)親クラスのstaticコンストラクタ
            //4)staticコンストラクタ
            //5)変数のメモリストレージを0へ
            //6)変数のオブジェクト初期化子
            //7)親クラスのコンストラクタ
            //8)コンストラクタ

        }
    }
}
